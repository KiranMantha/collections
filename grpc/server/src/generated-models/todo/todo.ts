// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.26.1
// source: todo.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "todo";

/** Empty contract */
export interface Empty {
}

export interface Todo {
  id: number;
  text: string;
  completed: boolean;
}

export interface FindAllTodoResponse {
  todos: Todo[];
}

export interface FindOneTodoRequest {
  id: number;
}

export interface FindOneTodoResponse {
  todo: Todo | undefined;
}

export interface CreateTodoRequest {
  text: string;
}

export interface UpdateTodoRequest {
  id: number;
  completed: boolean;
}

export interface UpdateTodoResponse {
  success: boolean;
}

export interface RemoveTodoRequest {
  id: number;
}

export interface RemoveTodoResponse {
  success: boolean;
}

function createBaseEmpty(): Empty {
  return {};
}

export const Empty = {
  encode(_: Empty, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Empty {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseTodo(): Todo {
  return { id: 0, text: "", completed: false };
}

export const Todo = {
  encode(message: Todo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    if (message.completed !== false) {
      writer.uint32(24).bool(message.completed);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Todo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTodo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.completed = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Todo {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      completed: isSet(object.completed) ? globalThis.Boolean(object.completed) : false,
    };
  },

  toJSON(message: Todo): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.completed !== false) {
      obj.completed = message.completed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Todo>, I>>(base?: I): Todo {
    return Todo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Todo>, I>>(object: I): Todo {
    const message = createBaseTodo();
    message.id = object.id ?? 0;
    message.text = object.text ?? "";
    message.completed = object.completed ?? false;
    return message;
  },
};

function createBaseFindAllTodoResponse(): FindAllTodoResponse {
  return { todos: [] };
}

export const FindAllTodoResponse = {
  encode(message: FindAllTodoResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.todos) {
      Todo.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FindAllTodoResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindAllTodoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.todos.push(Todo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindAllTodoResponse {
    return { todos: globalThis.Array.isArray(object?.todos) ? object.todos.map((e: any) => Todo.fromJSON(e)) : [] };
  },

  toJSON(message: FindAllTodoResponse): unknown {
    const obj: any = {};
    if (message.todos?.length) {
      obj.todos = message.todos.map((e) => Todo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindAllTodoResponse>, I>>(base?: I): FindAllTodoResponse {
    return FindAllTodoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindAllTodoResponse>, I>>(object: I): FindAllTodoResponse {
    const message = createBaseFindAllTodoResponse();
    message.todos = object.todos?.map((e) => Todo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFindOneTodoRequest(): FindOneTodoRequest {
  return { id: 0 };
}

export const FindOneTodoRequest = {
  encode(message: FindOneTodoRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FindOneTodoRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindOneTodoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindOneTodoRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: FindOneTodoRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindOneTodoRequest>, I>>(base?: I): FindOneTodoRequest {
    return FindOneTodoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindOneTodoRequest>, I>>(object: I): FindOneTodoRequest {
    const message = createBaseFindOneTodoRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseFindOneTodoResponse(): FindOneTodoResponse {
  return { todo: undefined };
}

export const FindOneTodoResponse = {
  encode(message: FindOneTodoResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.todo !== undefined) {
      Todo.encode(message.todo, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FindOneTodoResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindOneTodoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.todo = Todo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindOneTodoResponse {
    return { todo: isSet(object.todo) ? Todo.fromJSON(object.todo) : undefined };
  },

  toJSON(message: FindOneTodoResponse): unknown {
    const obj: any = {};
    if (message.todo !== undefined) {
      obj.todo = Todo.toJSON(message.todo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindOneTodoResponse>, I>>(base?: I): FindOneTodoResponse {
    return FindOneTodoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindOneTodoResponse>, I>>(object: I): FindOneTodoResponse {
    const message = createBaseFindOneTodoResponse();
    message.todo = (object.todo !== undefined && object.todo !== null) ? Todo.fromPartial(object.todo) : undefined;
    return message;
  },
};

function createBaseCreateTodoRequest(): CreateTodoRequest {
  return { text: "" };
}

export const CreateTodoRequest = {
  encode(message: CreateTodoRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateTodoRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTodoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTodoRequest {
    return { text: isSet(object.text) ? globalThis.String(object.text) : "" };
  },

  toJSON(message: CreateTodoRequest): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateTodoRequest>, I>>(base?: I): CreateTodoRequest {
    return CreateTodoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateTodoRequest>, I>>(object: I): CreateTodoRequest {
    const message = createBaseCreateTodoRequest();
    message.text = object.text ?? "";
    return message;
  },
};

function createBaseUpdateTodoRequest(): UpdateTodoRequest {
  return { id: 0, completed: false };
}

export const UpdateTodoRequest = {
  encode(message: UpdateTodoRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.completed !== false) {
      writer.uint32(24).bool(message.completed);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateTodoRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTodoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.completed = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTodoRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      completed: isSet(object.completed) ? globalThis.Boolean(object.completed) : false,
    };
  },

  toJSON(message: UpdateTodoRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.completed !== false) {
      obj.completed = message.completed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateTodoRequest>, I>>(base?: I): UpdateTodoRequest {
    return UpdateTodoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateTodoRequest>, I>>(object: I): UpdateTodoRequest {
    const message = createBaseUpdateTodoRequest();
    message.id = object.id ?? 0;
    message.completed = object.completed ?? false;
    return message;
  },
};

function createBaseUpdateTodoResponse(): UpdateTodoResponse {
  return { success: false };
}

export const UpdateTodoResponse = {
  encode(message: UpdateTodoResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateTodoResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTodoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTodoResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: UpdateTodoResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateTodoResponse>, I>>(base?: I): UpdateTodoResponse {
    return UpdateTodoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateTodoResponse>, I>>(object: I): UpdateTodoResponse {
    const message = createBaseUpdateTodoResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseRemoveTodoRequest(): RemoveTodoRequest {
  return { id: 0 };
}

export const RemoveTodoRequest = {
  encode(message: RemoveTodoRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveTodoRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveTodoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveTodoRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: RemoveTodoRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveTodoRequest>, I>>(base?: I): RemoveTodoRequest {
    return RemoveTodoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveTodoRequest>, I>>(object: I): RemoveTodoRequest {
    const message = createBaseRemoveTodoRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseRemoveTodoResponse(): RemoveTodoResponse {
  return { success: false };
}

export const RemoveTodoResponse = {
  encode(message: RemoveTodoResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveTodoResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveTodoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveTodoResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: RemoveTodoResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveTodoResponse>, I>>(base?: I): RemoveTodoResponse {
    return RemoveTodoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveTodoResponse>, I>>(object: I): RemoveTodoResponse {
    const message = createBaseRemoveTodoResponse();
    message.success = object.success ?? false;
    return message;
  },
};

export type TodoServiceService = typeof TodoServiceService;
export const TodoServiceService = {
  findAllTodo: {
    path: "/todo.TodoService/FindAllTodo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: FindAllTodoResponse) => Buffer.from(FindAllTodoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FindAllTodoResponse.decode(value),
  },
  findOneTodo: {
    path: "/todo.TodoService/FindOneTodo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindOneTodoRequest) => Buffer.from(FindOneTodoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FindOneTodoRequest.decode(value),
    responseSerialize: (value: FindOneTodoResponse) => Buffer.from(FindOneTodoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FindOneTodoResponse.decode(value),
  },
  createTodo: {
    path: "/todo.TodoService/CreateTodo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateTodoRequest) => Buffer.from(CreateTodoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateTodoRequest.decode(value),
    responseSerialize: (value: Todo) => Buffer.from(Todo.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Todo.decode(value),
  },
  updateTodo: {
    path: "/todo.TodoService/UpdateTodo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateTodoRequest) => Buffer.from(UpdateTodoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateTodoRequest.decode(value),
    responseSerialize: (value: UpdateTodoResponse) => Buffer.from(UpdateTodoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateTodoResponse.decode(value),
  },
  removeTodo: {
    path: "/todo.TodoService/RemoveTodo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RemoveTodoRequest) => Buffer.from(RemoveTodoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RemoveTodoRequest.decode(value),
    responseSerialize: (value: RemoveTodoResponse) => Buffer.from(RemoveTodoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RemoveTodoResponse.decode(value),
  },
} as const;

export interface TodoServiceServer extends UntypedServiceImplementation {
  findAllTodo: handleUnaryCall<Empty, FindAllTodoResponse>;
  findOneTodo: handleUnaryCall<FindOneTodoRequest, FindOneTodoResponse>;
  createTodo: handleUnaryCall<CreateTodoRequest, Todo>;
  updateTodo: handleUnaryCall<UpdateTodoRequest, UpdateTodoResponse>;
  removeTodo: handleUnaryCall<RemoveTodoRequest, RemoveTodoResponse>;
}

export interface TodoServiceClient extends Client {
  findAllTodo(
    request: Empty,
    callback: (error: ServiceError | null, response: FindAllTodoResponse) => void,
  ): ClientUnaryCall;
  findAllTodo(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: FindAllTodoResponse) => void,
  ): ClientUnaryCall;
  findAllTodo(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: FindAllTodoResponse) => void,
  ): ClientUnaryCall;
  findOneTodo(
    request: FindOneTodoRequest,
    callback: (error: ServiceError | null, response: FindOneTodoResponse) => void,
  ): ClientUnaryCall;
  findOneTodo(
    request: FindOneTodoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: FindOneTodoResponse) => void,
  ): ClientUnaryCall;
  findOneTodo(
    request: FindOneTodoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: FindOneTodoResponse) => void,
  ): ClientUnaryCall;
  createTodo(
    request: CreateTodoRequest,
    callback: (error: ServiceError | null, response: Todo) => void,
  ): ClientUnaryCall;
  createTodo(
    request: CreateTodoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Todo) => void,
  ): ClientUnaryCall;
  createTodo(
    request: CreateTodoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Todo) => void,
  ): ClientUnaryCall;
  updateTodo(
    request: UpdateTodoRequest,
    callback: (error: ServiceError | null, response: UpdateTodoResponse) => void,
  ): ClientUnaryCall;
  updateTodo(
    request: UpdateTodoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateTodoResponse) => void,
  ): ClientUnaryCall;
  updateTodo(
    request: UpdateTodoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateTodoResponse) => void,
  ): ClientUnaryCall;
  removeTodo(
    request: RemoveTodoRequest,
    callback: (error: ServiceError | null, response: RemoveTodoResponse) => void,
  ): ClientUnaryCall;
  removeTodo(
    request: RemoveTodoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RemoveTodoResponse) => void,
  ): ClientUnaryCall;
  removeTodo(
    request: RemoveTodoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RemoveTodoResponse) => void,
  ): ClientUnaryCall;
}

export const TodoServiceClient = makeGenericClientConstructor(TodoServiceService, "todo.TodoService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TodoServiceClient;
  service: typeof TodoServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
