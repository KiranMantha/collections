// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.26.1
// source: node_modules/protos/src/todo.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "todo";

/** Empty contract */
export interface Empty {
}

export interface Todo {
  id: number;
  text: string;
  completed: boolean;
}

export interface FindAllTodoResponse {
  todos: Todo[];
}

export interface FindOneTodoRequest {
  id: number;
}

export interface FindOneTodoResponse {
  todo: Todo | undefined;
}

export interface CreateTodoRequest {
  text: string;
}

export interface UpdateTodoRequest {
  id: number;
  completed: boolean;
}

export interface UpdateTodoResponse {
  success: boolean;
}

export interface RemoveTodoRequest {
  id: number;
}

export interface RemoveTodoResponse {
  success: boolean;
}

export const TODO_PACKAGE_NAME = "todo";

export interface TodoServiceClient {
  findAllTodo(request: Empty): Observable<FindAllTodoResponse>;

  findOneTodo(request: FindOneTodoRequest): Observable<FindOneTodoResponse>;

  createTodo(request: CreateTodoRequest): Observable<Todo>;

  updateTodo(request: UpdateTodoRequest): Observable<UpdateTodoResponse>;

  removeTodo(request: RemoveTodoRequest): Observable<RemoveTodoResponse>;
}

export interface TodoServiceController {
  findAllTodo(request: Empty): Observable<FindAllTodoResponse>;

  findOneTodo(request: FindOneTodoRequest): Observable<FindOneTodoResponse>;

  createTodo(request: CreateTodoRequest): Observable<Todo>;

  updateTodo(request: UpdateTodoRequest): Observable<UpdateTodoResponse>;

  removeTodo(request: RemoveTodoRequest): Observable<RemoveTodoResponse>;
}

export function TodoServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findAllTodo", "findOneTodo", "createTodo", "updateTodo", "removeTodo"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TodoService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TodoService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TODO_SERVICE_NAME = "TodoService";
